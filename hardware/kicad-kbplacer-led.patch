diff --git a/pyproject.toml b/pyproject.toml
index 13aa4d2..17e249b 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -151,6 +151,7 @@ dependencies = [
 [tool.hatch.envs.tools.scripts]
 layout2image = "python tools/layout2image.py {args}"
 layout2schematic = "python tools/layout2schematic.py {args}"
+layout2ledschematic = "python tools/layout2led.py {args}"
 layout2url = "python tools/layout2url.py {args}"
 layout2openscad = "python tools/layout2openscad.py {args}"
 kle2kle = "python tools/kle2kle.py {args}"
diff --git a/tools/layout2led.py b/tools/layout2led.py
new file mode 100644
index 0000000..9892ba1
--- /dev/null
+++ b/tools/layout2led.py
@@ -0,0 +1,262 @@
+import argparse
+import json
+import logging
+import re
+import shutil
+import sys
+from collections import defaultdict
+from pathlib import Path
+from typing import Dict, List, Optional, Tuple
+
+import yaml
+from skip import Schematic
+
+from kbplacer.kle_serial import MatrixAnnotatedKeyboard, get_keyboard
+
+logger = logging.getLogger(__name__)
+
+ORIGIN = (18, 18)
+UNIT = 1.27
+
+COLUMN_DISTANCE = 10
+ROW_DISTANCE = 16
+
+TEMPLATE = """(kicad_sch  (version 20250114)  (generator "eeschema")  (generator_version "9.0")  (uuid "d54c4c62-c3a2-4ca9-bc42-a590564f76fb")  (paper "{page_size}")  (lib_symbols   (symbol "Device:LED"    (pin_numbers     (hide yes)    )    (pin_names     (offset 1.016)     (hide yes)    )    (exclude_from_sim no)    (in_bom yes)    (on_board yes)    (property "Reference" "D"     (at 0 2.54 0)     (effects      (font       (size 1.27 1.27)      )     )    )    (property "Value" "LED"     (at 0 -2.54 0)     (effects      (font       (size 1.27 1.27)      )     )    )    (property "Footprint" ""     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "Datasheet" "~"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "Description" "Light emitting diode"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "Sim.Pins" "1=K 2=A"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "ki_keywords" "LED diode"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "ki_fp_filters" "LED* LED_SMD:* LED_THT:*"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (symbol "LED_0_1"     (polyline      (pts       (xy -3.048 -0.762) (xy -4.572 -2.286) (xy -3.81 -2.286) (xy -4.572 -2.286) (xy -4.572 -1.524)      )      (stroke       (width 0)       (type default)      )      (fill       (type none)      )     )     (polyline      (pts       (xy -1.778 -0.762) (xy -3.302 -2.286) (xy -2.54 -2.286) (xy -3.302 -2.286) (xy -3.302 -1.524)      )      (stroke       (width 0)       (type default)      )      (fill       (type none)      )     )     (polyline      (pts       (xy -1.27 0) (xy 1.27 0)      )      (stroke       (width 0)       (type default)      )      (fill       (type none)      )     )     (polyline      (pts       (xy -1.27 -1.27) (xy -1.27 1.27)      )      (stroke       (width 0.254)       (type default)      )      (fill       (type none)      )     )     (polyline      (pts       (xy 1.27 -1.27) (xy 1.27 1.27) (xy -1.27 0) (xy 1.27 -1.27)      )      (stroke       (width 0.254)       (type default)      )      (fill       (type none)      )     )    )    (symbol "LED_1_1"     (pin passive line      (at -3.81 0 0)      (length 2.54)      (name "K"       (effects        (font         (size 1.27 1.27)        )       )      )      (number "1"       (effects        (font         (size 1.27 1.27)        )       )      )     )     (pin passive line      (at 3.81 0 180)      (length 2.54)      (name "A"       (effects        (font         (size 1.27 1.27)        )       )      )      (number "2"       (effects        (font         (size 1.27 1.27)        )       )      )     )    )    (embedded_fonts no)   )   (symbol "Device:R_45deg"    (pin_numbers     (hide yes)    )    (pin_names     (offset 0)    )    (exclude_from_sim no)    (in_bom yes)    (on_board yes)    (property "Reference" "R"     (at 5.08 2.54 0)     (effects      (font       (size 1.27 1.27)      )     )    )    (property "Value" "R_45deg"     (at 8.255 0.635 0)     (effects      (font       (size 1.27 1.27)      )     )    )    (property "Footprint" ""     (at 0 -1.778 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "Datasheet" "~"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "Description" "Resistor, rotated by 45°"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "ki_keywords" "R res resistor diagonal"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (property "ki_fp_filters" "R_*"     (at 0 0 0)     (effects      (font       (size 1.27 1.27)      )      (hide yes)     )    )    (symbol "R_45deg_0_1"     (polyline      (pts       (xy -2.54 2.54) (xy -1.27 1.27)      )      (stroke       (width 0)       (type default)      )      (fill       (type none)      )     )     (polyline      (pts       (xy 1.27 -1.27) (xy 2.54 -2.54)      )      (stroke       (width 0)       (type default)      )      (fill       (type none)      )     )    )    (symbol "R_45deg_1_1"     (polyline      (pts       (xy -1.778 0.762) (xy 0.762 -1.778) (xy 1.778 -0.762) (xy -0.762 1.778) (xy -1.778 0.762)      )      (stroke       (width 0.254)       (type default)      )      (fill       (type none)      )     )     (pin passive line      (at -2.54 2.54 0)      (length 0)      (name "~"       (effects        (font         (size 1.27 1.27)        )       )      )      (number "1"       (effects        (font         (size 1.27 1.27)        )       )      )     )     (pin passive line      (at 2.54 -2.54 180)      (length 0)      (name "~"       (effects        (font         (size 1.27 1.27)        )       )      )      (number "2"       (effects        (font         (size 1.27 1.27)        )       )      )     )    )    (embedded_fonts no)   )  )  (symbol   (lib_id "Device:LED")   (at 157.48 106.68 0)   (unit 1)   (exclude_from_sim no)   (in_bom yes)   (on_board yes)   (dnp no)   (fields_autoplaced yes)   (uuid "3eaeed32-4d69-45ae-bccd-728644849e10")   (property "Reference" "LED"    (at 154.6224 104.14 90)    (effects     (font      (size 1.27 1.27)     )     (justify left)    )   )   (property "Value" "LED"    (at 157.1624 104.14 90)    (effects     (font      (size 1.27 1.27)     )     (justify left)    )   )   (property "Footprint" ""    (at 157.48 106.68 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (property "Datasheet" "~"    (at 157.48 106.68 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (property "Description" "Light emitting diode"    (at 157.48 106.68 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (property "Sim.Pins" "1=K 2=A"    (at 157.48 106.68 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (pin "2"    (uuid "17095d85-9c49-4df9-b210-b046af0ceb64")   )   (pin "1"    (uuid "ba2a5686-896f-4f64-a9c1-d7e0ca5ed4af")   )   (instances    (project ""     (path "/d54c4c62-c3a2-4ca9-bc42-a590564f76fb"      (reference "LED")      (unit 1)     )    )   )  )  (symbol   (lib_id "Device:R_45deg")   (at 154.94 95.25 0)   (unit 1)   (exclude_from_sim no)   (in_bom yes)   (on_board yes)   (dnp no)   (fields_autoplaced yes)   (uuid "7aca4129-b38c-40af-964d-f18dcbbdd055")   (property "Reference" "R"    (at 154.94 87.63 0)    (effects     (font      (size 1.27 1.27)     )    )   )   (property "Value" "R_45deg"    (at 154.94 90.17 0)    (effects     (font      (size 1.27 1.27)     )    )   )   (property "Footprint" ""    (at 154.94 97.028 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (property "Datasheet" "~"    (at 154.94 95.25 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (property "Description" "Resistor, rotated by 45°"    (at 154.94 95.25 0)    (effects     (font      (size 1.27 1.27)     )     (hide yes)    )   )   (pin "2"    (uuid "f7ed639e-7988-4d7e-8110-b3da180280e0")   )   (pin "1"    (uuid "1ef2baba-8216-4fb7-915b-15876687810e")   )   (instances    (project ""     (path "/d54c4c62-c3a2-4ca9-bc42-a590564f76fb"      (reference "R")      (unit 1)     )    )   )  )  (sheet_instances   (path "/"    (page "1")   )  )  (embedded_fonts no) ) """
+
+def _x(x: int) -> float:
+    return (ORIGIN[0] * UNIT) + (x * UNIT)
+
+
+def _y(y: int) -> float:
+    return (ORIGIN[1] * UNIT) + (y * UNIT)
+
+
+def load_keyboard(layout_path) -> MatrixAnnotatedKeyboard:
+    with open(layout_path, "r", encoding="utf-8") as f:
+        if layout_path.endswith("yaml") or layout_path.endswith("yml"):
+            layout = yaml.safe_load(f)
+        else:
+            layout = json.load(f)
+        _keyboard = get_keyboard(layout)
+        if not isinstance(_keyboard, MatrixAnnotatedKeyboard):
+            try:
+                _keyboard = MatrixAnnotatedKeyboard(_keyboard.meta, _keyboard.keys)
+            except Exception as e:
+                msg = (
+                    f"Layout from {_keyboard} is not convertible to "
+                    "matrix annotated keyboard which is required for schematic create"
+                )
+                raise RuntimeError(msg) from e
+        _keyboard.collapse()
+        return _keyboard
+
+
+def get_lowest_paper_size(size):
+    matrix_size_to_paper = {(8, 19): "A4", (11, 30): "A3", (17, 44): "A2"}
+    smallest_size = None
+    for key in sorted(matrix_size_to_paper):
+        if size[0] <= key[0] and size[1] <= key[1]:
+            smallest_size = matrix_size_to_paper[key]
+            break
+    if smallest_size is None:
+        smallest_size = "A1"
+    return smallest_size
+
+
+def parse_annotation(annotation: str) -> Tuple[Optional[str], int]:
+    pattern = r"^([A-Za-z]*)(\d+)$"
+
+    match = re.match(pattern, annotation)
+    if match:
+        prefix, digits = match.groups()
+        return prefix if prefix else None, int(digits)
+    msg = "Unexpected annotation format"
+    raise RuntimeError(msg)
+
+
+def get_or_default(value: Optional[str], default: str) -> str:
+    return value if value else default
+
+
+def create_schematic(
+    input_path, output_path, resistor_footprint="", diode_footprint=""
+) -> None:
+    keyboard = load_keyboard(input_path)
+    matrix = [
+        (parse_annotation(pos[0])[1], parse_annotation(pos[1])[1])
+        for pos in (
+            MatrixAnnotatedKeyboard.get_matrix_position(k)
+            for k in keyboard.keys_in_matrix_order()
+        )
+    ]
+
+    logger.debug(f"Matrix: {matrix}")
+
+    # deduce label names from annotation of first key,
+    # if annotations are comma separated numbers then use default 'ROW'/'COL' names,
+    # otherwise use same prefix as in annotation
+    first_key = keyboard.keys[0]
+    first_key_matrix_position = MatrixAnnotatedKeyboard.get_matrix_position(first_key)
+    row_label_prefix = get_or_default(
+        parse_annotation(first_key_matrix_position[0])[0], "ROW"
+    )
+    column_label_prefix = get_or_default(
+        parse_annotation(first_key_matrix_position[1])[0], "COL"
+    )
+
+    logger.debug(
+        f"Labels prefixes: for rows: '{row_label_prefix}', "
+        f"for columns: '{column_label_prefix}'"
+    )
+
+    # rows and columns does not necessarily contain each value from min to max,
+    # i.e. matrix can have columns numbers: 1, 2, 4, 5. Because whole
+    # element placing and wiring logic depends on fixed positions calculated
+    # from row/column values, the following `rows` and `columns` variables
+    # represents maximum size (using mentioned example, columns = 5 (and not 4).
+    # Even though the whole column 3 will be empty, it is easier to draw that.
+    # We also assume that both rows and columns starts from 0 and can't be negative.
+    rows = max(set([x[0] for x in matrix]))
+    columns = max(set([x[1] for x in matrix]))
+    logger.debug(f"Matrix size: {rows}x{columns}")
+
+    with open(output_path, "w") as f:
+        size = (rows, columns)
+        f.write(TEMPLATE.format(page_size=get_lowest_paper_size(size)))
+
+    sch = Schematic(output_path)
+    base_resistor = sch.symbol.reference_startswith("R")[0]
+    if resistor_footprint:
+        base_resistor.property.Footprint.value = resistor_footprint
+    base_diode = sch.symbol.reference_startswith("LED")[0]
+    if diode_footprint:
+        base_diode.property.Footprint.value = diode_footprint
+
+    progress: Dict[Tuple[int, int], List[str]] = defaultdict(list)
+
+    current_ref = 1
+    labels = set()
+
+    for row, column in matrix:
+        position = (row, column)
+        logger.debug(f"row: {row} column: {column}")
+        row_label = f"{row_label_prefix}{row}"
+        column_label = f"{column_label_prefix}{column}"
+
+        used_slots = len(progress[position])
+        if used_slots > 3:
+            # clamp to maximum value (use same slot for all 3+ alternative keys)
+            # schematic readability will suffer but such layouts are uncommon anyway
+            used_slots = 3
+
+        resistor = base_resistor.clone()
+        if used_slots == 0:
+            resistor_reference = f"R{current_ref}"
+        else:
+            default_resistor = progress[position][0]
+            resistor_reference = f"{default_resistor}_{used_slots}"
+        resistor.setAllReferences(resistor_reference)
+        resistor_x = _x(COLUMN_DISTANCE * int(column) + 5)
+        resistor_y = _y(ROW_DISTANCE * int(row) + used_slots)
+        resistor.move(resistor_x, resistor_y)
+        if used_slots != 0:
+            junc = sch.junction.new()
+            junc.move(resistor.pin.n2.location.x, resistor.pin.n2.location.y)
+        wire = sch.wire.new()
+        wire.start_at(resistor.pin.n1)
+        wire.delta_x = -1 * UNIT
+        wire.delta_y = 0
+        if column_label not in labels and used_slots == 0:
+            column_wire = sch.wire.new()
+            column_wire.start_at(wire.end)
+            column_wire.delta_x = 0
+            column_wire.delta_y = (ROW_DISTANCE * (rows - row) + 15) * UNIT
+
+            label = sch.global_label.new()
+            label.move(column_wire.end.value[0], column_wire.end.value[1], 270)
+            label.value = column_label
+            labels.add(column_label)
+        else:
+            junc = sch.junction.new()
+            junc.move(wire.end)
+
+        if used_slots == 0:
+            diode = base_diode.clone()
+            diode.setAllReferences(f"LED{current_ref}")
+            diode_x = resistor_x + 2 * UNIT
+            diode_y = resistor_y + 7 * UNIT
+            diode.move(diode_x, diode_y)
+            wire = sch.wire.new()
+            wire.start_at(resistor.pin.n2)
+            wire.end_at(diode.pin.K)
+            wire = sch.wire.new()
+            wire.start_at(diode.pin.A)
+            wire.delta_x = 0
+            wire.delta_y = 1 * UNIT
+            if row_label not in labels:
+                row_wire = sch.wire.new()
+                row_wire.start_at(wire.end)
+                row_wire.delta_x = (COLUMN_DISTANCE * (columns - column) + 5) * UNIT
+                row_wire.delta_y = 0
+
+                label = sch.global_label.new()
+                label.move(row_wire.end.value[0], row_wire.end.value[1], 0)
+                label.effects.justify.value = "left"
+                label.value = row_label
+                labels.add(row_label)
+            else:
+                junc = sch.junction.new()
+                junc.move(wire.end)
+            current_ref += 1
+
+        progress[position].append(resistor_reference)
+
+    base_resistor.delete()
+    base_diode.delete()
+
+    sch.write(output_path)
+
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(
+        description="Keyboard layout to KiCad schematic",
+    )
+
+    parser.add_argument("-in", required=True, help="Layout file")
+    parser.add_argument("-out", required=True, help="Output path")
+    parser.add_argument(
+        "-f",
+        "--force",
+        action="store_true",
+        help="Override output if already exists",
+    )
+    parser.add_argument("-rf", required=False, help="resistor footprint")
+    parser.add_argument("-df", required=False, help="Diode footprint")
+    parser.add_argument(
+        "--log-level",
+        required=False,
+        default="WARNING",
+        choices=logging._nameToLevel.keys(),
+        type=str,
+        help="Provide logging level, default=%(default)s",
+    )
+
+    args = parser.parse_args()
+    input_path = getattr(args, "in")
+    output_path = getattr(args, "out")
+    force = args.force
+    resistor_footprint = getattr(args, "rf")
+    diode_footprint = getattr(args, "df")
+
+    # set up logger
+    logging.basicConfig(
+        level=args.log_level, format="%(asctime)s: %(message)s", datefmt="%H:%M:%S"
+    )
+
+    if force:
+        shutil.rmtree(output_path, ignore_errors=True)
+    elif Path(output_path).is_file():
+        logger.error(f"Output file '{output_path}' already exists, exiting...")
+        sys.exit(1)
+
+    create_schematic(input_path, output_path, resistor_footprint, diode_footprint)
